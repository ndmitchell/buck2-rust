##
## Reindeer Config
##

# Rustc flags on all rules
rustc_flags = [
  "--cap-lints=allow", # we don't want 3rd-party builds breaking just because of some lint
]

# Parse Rust code to work out the precise set of source files for each crate
precise_srcs = true

# Possible patterns for license files - lots of packages have them without
# registering them in the Cargo metadata, or have more than the single file
# it allows. Just look in the top-level dir for now.
license_patterns = [
  "LICENSE*", "COPYING*", "UNLICENSE*",
]

# Path to the Buck cell root (relative to this file)
buck_cell_root = "../"

# Generate templates for missing fixup files
fixup_templates = true

# Error on buckify if there are unresolved fixups
unresolved_fixup_error = true

# Provide additional information to resolve unresolved fixup errors
unresolved_fixup_error_message = """
To resolve fixup errors you need to tell reindeer how to handle the buildscript via a fixup.toml file.
See reindeer documentation for guidance."""

# Require all globs in fixups.toml files to match at least one file
strict_globs = true

[vendor]
# Exclude files listed in the .gitignore in this directory
gitignore_checksum_exclude = []
# Additional globs to ignore (prefer .gitignore for consistentcy with hg)
checksum_exclude = [
]

# Platforms we want to support.
# Listed properties are a set of values, any of which can match a predicate. These
# match specific configurations of rustc, as shown with `rustc --target <TARGET> --print cfg`.
# Unlisted properties are "don't care" or "match anything"
#
# The platform key sets the name of the platform in `platform_deps`/`named_platform_deps`.
# If it is "DEFAULT" then the platform's dependencies are put into the normal
# `deps`/`named_deps`.

# Linux (fbcode w/ tp2 - platform009) - x86_64-unknown-linux-gnu
[platform.linux-platform009]
x86_64-unknown-linux-gnu = [] # true for a boolean test
target_family = ["unix"]
target_os = ["linux"]
target_env = ["gnu", "fbcode", "platform009"]
target_arch = ["x86_64"]
feature = [] # in case anyone is doing `cfg(feature = "foo")`, which never works

# Linux (fbcode w/ tp2 - platform010) - x86_64-unknown-linux-gnu
[platform.linux-platform010]
x86_64-unknown-linux-gnu = [] # true for a boolean test
target_family = ["unix"]
target_os = ["linux"]
target_env = ["gnu", "fbcode", "platform010"]
target_arch = ["x86_64"]
feature = [] # in case anyone is doing `cfg(feature = "foo")`, which never works

# Linux (without tp2, such as during fbandroid builds on desktop linux) - x86_64-unknown-linux-gnu
[platform.linux-x86_64]
x86_64-unknown-linux-gnu = []
target_family = ["unix"]
target_os = ["linux"]
target_env = ["gnu"]
target_arch = ["x86_64"]
feature = []

# Fortanix SGX - not supported yet
#[platform.fortanix-sgx]
#x86_64-fortanix-unknown-sgx = []
#target_family = []
#target_os = ["unknown"]
#target_vendor = ["fortanix"]
#target_env = ["sgx"]
#target_arch = ["x86_64"]
#feature = []

# macOS - x86_64-apple-darwin
[platform.macos-x86_64]
x86_64-apple-darwin = []
target_family = ["unix"]
target_os = ["macos"]
target_env = []
target_arch = ["x86_64"]

# macOS - aarch64-apple-darwin
[platform.macos-arm64]
aarch64-apple-darwin = []
target_family = ["unix"]
target_os = ["macos"]
target_env = []
target_arch = ["aarch64"]

# Windows with MSVC toolchain - x86_64-pc-windows-msvc
[platform.windows]
x86_64-pc-windows-msvc = []
target_family = ["windows"]
target_os = ["windows"]
target_env = ["msvc"]
target_arch = ["x86_64"]

[platform.android-x86]
i686-linux-android = []
target_family = ["unix"]
target_os = ["android"]
target_env = []
target_arch = ["x86"]

[platform.android-armv7]
arm-linux-androideabi = []
target_family = ["unix"]
target_os = ["android"]
target_env = []
target_arch = ["arm"]

[platform.android-arm64]
aarch64-linux-android = []
target_family = ["unix"]
target_os = ["android"]
target_env = []
target_arch = ["aarch64"]

[platform.iphonesimulator-x86_64]
x86_64-apple-ios = []
target_family = ["unix"]
target_os = ["ios"]
target_env = []
target_arch = ["x86_64"]

[platform.iphonesimulator-x86]
x86-apple-ios = []
target_family = ["unix"]
target_os = ["ios"]
target_env = []
target_arch = ["x86"]

[platform.iphonesimulator-arm64]
arm64-apple-ios = []
target_family = ["unix"]
target_os = ["ios"]
target_env = []
target_arch = ["aarch64"]

[platform.iphoneos-armv7]
armv7-apple-ios = []
target_family = ["unix"]
target_os = ["ios"]
target_env = []
target_arch = ["arm"]

[platform.iphoneos-arm64]
arm64-apple-ios = []
target_family = ["unix"]
target_os = ["ios"]
target_env = []
target_arch = ["aarch64"]

[cargo]
versioned_dirs = true

[buck]
file_name = "BUCK" # default

generated_file_header = """
##
## \u0040generated by reindeer
## Do not edit by hand.
"""

buckfile_imports = """
load(
    ":stdlib_rule_defs.bzl",
    "stdlib_rust_binary",
    "stdlib_rust_library",
    "add_platformed_stdlib",
)
load(
    "@root//third_party:rust_third_party.bzl",
    "rust_buildscript_genrule_args",
    "rust_buildscript_genrule_srcs",
    "third_party_rust_cxx_library",
    "third_party_rust_prebuilt_cxx_library",
)

# Generate configured_alias-ed stdlibs
add_platformed_stdlib("bootstrap//platform:stage0")
add_platformed_stdlib("bootstrap//platform:stage1")
add_platformed_stdlib("bootstrap//platform:stage2")
"""

# Rules used for various kinds of targets
rust_library = "stdlib_rust_library"
rust_binary = "stdlib_rust_binary"
cxx_library = "third_party_rust_cxx_library"
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library"
buildscript_genrule_args = "rust_buildscript_genrule_args"
buildscript_genrule_srcs = "rust_buildscript_genrule_srcs"
